#+STARTUP: overview
* Interface
  #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message 1)  ; Don't show the startup message
    (tool-bar-mode -1)                ; Disable the toolbar
    (menu-bar-mode 1)                 ; Disable menu bar
    (scroll-bar-mode -1)              ; Disable scroll bar
    (cua-mode t)                      ; 'C-v', 'C-c', 'C-x' are able to use
    (fset 'yes-or-no-p 'y-or-n-p)     ; Short form of yes and no
    (global-linum-mode t)             ; Line numbers
    (global-subword-mode t)           ; CamelCaseWords - cursor sop in-between the camelCase
    (setq column-number-mode t)       ; Display the current column number
    (setq org-src-fontify-natively t) ; fontify code in code blocks in org-mode <s TAB
    (setq ring-bell-function 'ignore) ; Turn off alarms completly
  #+END_SRC

** Brackets
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1) ; Show matching pairs and other characters
  (setq show-paren-style 'parenthesis)

  (electric-pair-mode 1)

  (setq electric-pair-inhibit-predicate
        `(lambda (c)
           (if (char-equal c ?\<) t (,electric-pair-inhibit-predicate c))))

  (use-package rainbow-delimiters
    :ensure t)

  (require 'rainbow-delimiters)
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)

  (custom-set-faces
   '(rainbow-delimiters-depth-1-face ((t (:foreground "red"))))
   '(rainbow-delimiters-depth-2-face ((t (:foreground "sienna3"))))
   '(rainbow-delimiters-depth-3-face ((t (:foreground "yellow"))))
   '(rainbow-delimiters-depth-4-face ((t (:foreground "green"))))
   '(rainbow-delimiters-depth-5-face ((t (:foreground "dodger blue"))))
   '(rainbow-delimiters-depth-6-face ((t (:foreground "violet"))))
   '(rainbow-delimiters-depth-7-face ((t (:foreground "purple"))))
   '(rainbow-delimiters-depth-8-face ((t (:foreground "snow2"))))
   '(rainbow-delimiters-unmatched-face ((t (:background "cyan"))))
   )

  (global-set-key (kbd "M-<right>") 'forward-list)
  (global-set-key (kbd "M-<left>") 'backward-list)
#+END_SRC

** Backup
#+BEGIN_SRC emacs-lisp
  (setq vc-make-backup-files t)

    (setq version-control t     ; Use version numbers for backups.
          kept-new-versions 10  ; Number of newest versions to keep.
          kept-old-versions 0   ; Number of oldest versions to keep.
          delete-old-versions t ; Don't ask to delete excess backup versions.
          backup-by-copying t)  ; Copy all files, don't rename them.

  (setq backup-directory-alist '(("." . "~/.emacs_backup")))
#+END_SRC

** Mouse
#+BEGIN_SRC emacs-lisp
  (setq mouse-wheel-progressive-speed nil)

  (defun scroll-up-10-lines ()
    "Scroll up 10 lines"
    (interactive)
    (scroll-up 10))

  (defun scroll-down-10-lines ()
    "Scroll down 10 lines"
    (interactive)
    (scroll-down 10))

  (global-set-key (kbd "<wheel-up>") 'scroll-down-10-lines)
  (global-set-key (kbd "<wheel-down>") 'scroll-up-10-lines)
#+END_SRC

** Tabs/Spaces
#+begin_src emacs-lisp
  (progn
    (setq-default indent-tabs-mode nil))     ; set indentation to always use space
  (setq-default tab-width 2)                 ; set default tab display width
  (setq-default tab-always-indent 'complete) ; make tab key call indent command or insert tab character, depending on cursor position
#+end_src

** Whitespaces
#+begin_src emacs-lisp
  ;(global-whitespace-mode nil)
  ; 
  ;(progn
  ;  (setq whitespace-style (quote (face spaces tabs newline space-mark tab-mark newline-mark )))
  ; 
  ;  ;; Make whitespace-mode and whitespace-newline-mode use “¶” for end of line char and “▷” for tab.
  ;  (setq whitespace-display-mappings
  ;        ;; all numbers are unicode codepoint in decimal. e.g. (insert-char 182 1)
  ;        '(
  ;          (space-mark 32 [183] [46]) ; SPACE 32 「 」, 183 MIDDLE DOT 「·」, 46 FULL STOP 「.」
  ;          (newline-mark 10 [182 10]) ; LINE FEED,
  ;          (tab-mark 9 [9655 9] [92 9]) ; tab
  ;          )))
#+end_src

* Try
  #+BEGIN_SRC emacs-lisp
    (use-package try
      :ensure t)
  #+END_SRC

* Which key
 #+BEGIN_SRC emacs-lisp
   (use-package which-key
     :ensure t
     :config (which-key-mode))
 #+END_SRC

* Theme
#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :ensure t)
  (setq zenburn-override-colors-alist
        '(("zenburn-bg+05" . "#282828")
          ("zenburn-bg+1"  . "#2F2F2F")
          ("zenburn-bg+2"  . "#3F3F3F")
          ("zenburn-bg+3"  . "#4F4F4F")))
  (load-theme 'zenburn t)
#+END_SRC

* Org mode
  #+BEGIN_SRC emacs-lisp
    (setenv "BROWSER" "chromium-browser")

    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

    (custom-set-variables
     '(org-directory "~/emacs_dropbox/orgfiles")
     '(org-default-notes-file (concat org-directory "/notes.org"))
     '(org-export-html-postamble nil)
     '(org-hide-leading-stars t)
     '(org-startup-folded (quote overview))
     '(org-startup-indented t)
     )

    (setq org-file-apps
                    (append '(
                              ("\\.pdf\\'" . "evince %s")
     ("\\.x?html?\\'" . "/usr/bin/chromium-browser %s")
                              ) org-file-apps ))

     (global-set-key "\C-ca" 'org-agenda)
                (setq org-agenda-start-on-weekday nil)
                (setq org-agenda-custom-commands
                '(("c" "Simple agenda view"
                ((agenda "")
                (alltodo "")))))

    (global-set-key (kbd "C-c c") 'org-capture)

    (setq org-agenda-files (list "~/emacs_dropbox/orgfiles/gcal.org"
                                 "~/emacs_dropbox/orgfiles/i.org"
                                 "~/emacs_dropbox/orgfiles/schedule.org"))

    (setq org-capture-templates
          '(("a" "Appointment" entry (file+headline "~/emacs_dropbox/orgfiles/gcal.org" "Appointments")
             "* TODO %?\n:PROPERTIES:\n\n:END\nDEADLINE: %^T \n %i\n")
            ("n" "Note" entry (file+headline "~/emacs_dropbox/orgfiles/notes.org" "Notes")
             "* Note %?\n%T")
            ("l" "Link" entry (file+headline "~/emacs/dropbox/orgfiles/links.org" "Links")
             "* %? %^L %^g /n%T :prepend t")
            ("b" "Blog idea" entry (file+headline "~/emacs_dropbox/orgfiles/i.org" "Blog Topics:")
             "* %?\n%T" :prepend t)
            ("t" "To Do Item" entry (file+headline "~/emacs_dropbox/orgfiles/i.org" "To Do Items")
             "* %?\n%T" :prepend t)
            ("j" "Journal" entry (file+datetree "~/emcas_dropbox/journal.org")
             "* %?\nEntered on %U\n %i\n %a")
            ("s" "Screencast" entry (file "~/emacs_dropbox/orgfiles/screencastnotes.org")
             "* %?\n%i\n")))

    (defadvice org-capture-finalize 
        (after delete-capture-frame activate)  
      "Advise capture-finalize to close the frame"  
      (if (equal "capture" (frame-parameter nil 'name))  
          (delete-frame)))

    (defadvice org-capture-destroy 
        (after delete-capture-frame activate)  
      "Advise capture-destroy to close the frame"  
      (if (equal "capture" (frame-parameter nil 'name))  
          (delete-frame)))  

    (use-package noflet
      :ensure t )
    (defun make-capture-frame ()
      "Create a new frame and run org-capture."
      (interactive)
      (make-frame '((name . "capture")))
      (select-frame-by-name "capture")
      (delete-other-windows)
      (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
              (org-capture)))

    (setq org-list-allow-alphabetical t)

    (use-package htmlize
      :ensure t)

    (use-package org-ac
      :ensure t
      :init (progn
              (require 'org-ac)
              (org-ac/config-default)
              ))

    (setq org-ditaa-jar-path "/usr/share/ditaa/ditaa.jar")
  #+END_SRC

#+BEGIN_SRC emacs-lisp
  (progn
    ;; org-mode setup

    ;; when opening a org file, don't collapse headings
    ;(setq org-startup-folded nil)

    ;; wrap long lines. don't let it disappead to the right
    (setq org-startup-truncated nil)

    ;; when in a url link, enter key shild open it
    (setq org-return-follows-link t)

    ;; make org-mode syntax color embedded source code
    (setq org-src-fontify-natively t)

    )
#+END_SRC

* IDO
  #+BEGIN_SRC emacs-lisp
    ;(setq ido-enable-flex-matching t)
    ;(setq ido-everywhere t)
    ;(ido-mode 1)
    ; 
    ;(defalias 'list-buffer 'ibuffer)
  #+END_SRC
* Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t)
  (require 'helm)
   
  (use-package helm-swoop
    :ensure t)
  (require 'helm-swoop)
   
  (require 'helm-config)
  (helm-mode 1)
   
  (global-set-key (kbd "C-c h") 'helm-command-prefix)
  (global-unset-key (kbd "C-x c"))
   
  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB work in terminal
  (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
   
  (when (executable-find "curl")
    (setq helm-google-suggest-use-curl-p t))
   
  (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
        helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
        helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
        helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
        helm-ff-file-name-history-use-recentf t
        helm-echo-input-in-header-line t)
   
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "C-x b") 'helm-mini)
  (global-set-key (kbd "C-x r b") 'helm-bookmarks)
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
   
  (global-set-key (kbd "C-s") 'helm-swoop)
  (global-set-key (kbd "C-c M-i") 'helm-multi-swoop)
   
  (setq helm-buffers-fuzzy-matching t
        helm-recentf-fuzzy-match    t)
   
  (setq helm-locate-fuzzy-match t)
   
  (defun spacemacs//helm-hide-minibuffer-maybe ()
    "Hide minibuffer in Helm session if we use the header line as input field."
    (when (with-helm-buffer helm-echo-input-in-header-line)
      (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
        (overlay-put ov 'window (selected-window))
        (overlay-put ov 'face
                     (let ((bg-color (face-background 'default nil)))
                       `(:background ,bg-color :foreground ,bg-color)))
        (setq-local cursor-type nil))))
   
   
  (add-hook 'helm-minibuffer-set-up-hook
            'spacemacs//helm-hide-minibuffer-maybe)
   
  (setq helm-autoresize-max-height 0)
  (setq helm-autoresize-min-height 20)
  (helm-autoresize-mode 1)
   
  ;; <C-s> to GREP in helm-find-files
  (when (executable-find "ack-grep")
    (setq helm-grep-default-command "ack-grep -Hn --no-group --no-color %e %p %f"
          helm-grep-default-recurse-command "ack-grep -H --no-group --no-color %e %p %f"))
   
  ;; Find the definitions (function definitions. variable definitions) in a file by name
  ;;   <C-c h i>
  (setq helm-semantic-fuzzy-match t
        helm-imenu-fuzzy-match    t)
   
  (setq helm-M-x-fuzzy-match t) ;; optional fuzzy matching for helm-M-x
   
  ;;(global-set-key (kbd "C-s") 'helm-occur)
   
  ;; Keymaps
  (defvar helm-find-files-map
    (let ((map (make-sparse-keymap)))
      (set-keymap-parent map helm-map)
      (define-key map (kbd "RET")           'helm-ff-RET)
      (define-key map (kbd "C-]")           'helm-ff-run-toggle-basename)
      (define-key map (kbd "C-x C-f")       'helm-ff-run-locate)
      (define-key map (kbd "C-x C-d")       'helm-ff-run-browse-project)
      (define-key map (kbd "C-x r m")       'helm-ff-bookmark-set)
      (define-key map (kbd "C-x r b")       'helm-find-files-toggle-to-bookmark)
      (define-key map (kbd "C-x C-q")       'helm-ff-run-marked-files-in-dired)
      (define-key map (kbd "C-s")           'helm-ff-run-grep)
      (define-key map (kbd "M-g p")         'helm-ff-run-pdfgrep)
      (define-key map (kbd "M-g z")         'helm-ff-run-zgrep)
      (define-key map (kbd "M-g a")         'helm-ff-run-grep-ag)
      (define-key map (kbd "M-g g")         'helm-ff-run-git-grep)
      (define-key map (kbd "M-g i")         'helm-ff-run-gid)
      (define-key map (kbd "M-.")           'helm-ff-run-etags)
      (define-key map (kbd "M-R")           'helm-ff-run-rename-file)
      (define-key map (kbd "M-C")           'helm-ff-run-copy-file)
      (define-key map (kbd "M-B")           'helm-ff-run-byte-compile-file)
      (define-key map (kbd "M-L")           'helm-ff-run-load-file)
      (define-key map (kbd "M-S")           'helm-ff-run-symlink-file)
      (define-key map (kbd "M-Y")           'helm-ff-run-relsymlink-file)
      (define-key map (kbd "M-H")           'helm-ff-run-hardlink-file)
      (define-key map (kbd "M-D")           'helm-ff-run-delete-file)
      (define-key map (kbd "M-K")           'helm-ff-run-kill-buffer-persistent)
      (define-key map (kbd "M-T")           'helm-ff-run-touch-files)
      (define-key map (kbd "C-c d")         'helm-ff-persistent-delete)
      (define-key map (kbd "M-e")           'helm-ff-run-switch-to-eshell)
      (define-key map (kbd "C-c i")         'helm-ff-run-complete-fn-at-point)
      (define-key map (kbd "C-c o")         'helm-ff-run-switch-other-window)
      (define-key map (kbd "C-c C-o")       'helm-ff-run-switch-other-frame)
      (define-key map (kbd "C-c C-x")       'helm-ff-run-open-file-externally)
      (define-key map (kbd "C-c C-v")       'helm-ff-run-preview-file-externally)
      (define-key map (kbd "C-c X")         'helm-ff-run-open-file-with-default-tool)
      (define-key map (kbd "M-!")           'helm-ff-run-eshell-command-on-file)
      (define-key map (kbd "M-%")           'helm-ff-run-query-replace)
      (define-key map (kbd "C-M-%")         'helm-ff-run-query-replace-regexp)
      (define-key map (kbd "C-c =")         'helm-ff-run-ediff-file)
      (define-key map (kbd "M-=")           'helm-ff-run-ediff-merge-file)
      (define-key map (kbd "M-p")           'helm-find-files-history)
      (define-key map (kbd "C-c h")         'helm-ff-file-name-history)
      (define-key map (kbd "M-i")           'helm-ff-properties-persistent)
      (define-key map (kbd "C-}")           'helm-narrow-window)
      (define-key map (kbd "C-{")           'helm-enlarge-window)
      (define-key map (kbd "C-<backspace>") 'helm-ff-run-toggle-auto-update)
      (define-key map (kbd "C-c <DEL>")     'helm-ff-run-toggle-auto-update)
      (define-key map (kbd "C-c C-a")       'helm-ff-run-mail-attach-files)
      (define-key map (kbd "C-c p")         'helm-ff-run-print-file)
      (define-key map (kbd "C-c /")         'helm-ff-run-find-sh-command)
      ;; Next 2 have no effect if candidate is not an image file.
      (define-key map (kbd "M-l")           'helm-ff-rotate-left-persistent)
      (define-key map (kbd "M-r")           'helm-ff-rotate-right-persistent)
      (define-key map (kbd "C-l")           'helm-find-files-up-one-level)
      (define-key map (kbd "C-r")           'helm-find-files-down-last-level)
      (define-key map (kbd "C-c r")         'helm-ff-run-find-file-as-root)
      (define-key map (kbd "C-x C-v")       'helm-ff-run-find-alternate-file)
      (define-key map (kbd "C-c @")         'helm-ff-run-insert-org-link)
      (define-key map (kbd "S-<f1>")        'helm-ff-sort-alpha)
      (define-key map (kbd "S-<f2>")        'helm-ff-sort-by-newest)
      (define-key map (kbd "S-<f3>")        'helm-ff-sort-by-size)
      (helm-define-key-with-subkeys map (kbd "DEL") ?\d 'helm-ff-delete-char-backward
                                    '((C-backspace . helm-ff-run-toggle-auto-update)
                                      ([C-c DEL] . helm-ff-run-toggle-auto-update))
                                    nil 'helm-ff-delete-char-backward--exit-fn)
      (when helm-ff-lynx-style-map
        (define-key map (kbd "<left>")      'helm-find-files-up-one-level)
        (define-key map (kbd "<right>")     'helm-execute-persistent-action))
      (delq nil map))
    "Keymap for `helm-find-files'.")
   
  (defvar helm-read-file-map
    (let ((map (make-sparse-keymap)))
      (set-keymap-parent map helm-map)
      (define-key map (kbd "<C-return>")    'helm-cr-empty-string)
      (define-key map (kbd "M-RET")         'helm-cr-empty-string)
      (define-key map (kbd "C-]")           'helm-ff-run-toggle-basename)
      (define-key map (kbd "C-.")           'helm-find-files-up-one-level)
      (define-key map (kbd "C-l")           'helm-find-files-up-one-level)
      (define-key map (kbd "C-r")           'helm-find-files-down-last-level)
      (define-key map (kbd "C-c h")         'helm-ff-file-name-history)
      (define-key map (kbd "C-<backspace>") 'helm-ff-run-toggle-auto-update)
      (define-key map (kbd "C-c <DEL>")     'helm-ff-run-toggle-auto-update)
      (helm-define-key-with-subkeys map (kbd "DEL") ?\d 'helm-ff-delete-char-backward
                                    '((C-backspace . helm-ff-run-toggle-auto-update)
                                      ([C-c DEL] . helm-ff-run-toggle-auto-update))
                                    nil 'helm-ff-delete-char-backward--exit-fn)
      (when helm-ff-lynx-style-map
        (define-key map (kbd "<left>")      'helm-find-files-up-one-level)
        (define-key map (kbd "<right>")     'helm-execute-persistent-action)
        (define-key map (kbd "<M-left>")    'helm-previous-source)
        (define-key map (kbd "<M-right>")   'helm-next-source))
      (delq nil map))
    "Keymap for `helm-read-file-name'.")
#+END_SRC

* Ace window
  #+BEGIN_SRC emacs-lisp
    (use-package ace-window
      :ensure t
      :init
      (progn
        (setq aw-scope 'global)
        (global-set-key (kbd "C-x O") 'other-frame)
        (global-set-key [remap other-window] 'ace-window)
        (custom-set-faces
         '(aw-leading-char-face
           ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
        ))
  #+END_SRC

* Swiper/Ivy/Counsel
#+begin_src emacs-lisp
  ;(use-package counsel
  ;  :ensure t
  ;  :bind
  ;  (("M-y" . counsel-yank-pop)
  ;   :map ivy-minibuffer-map
  ;   ("M-y" . ivy-next-line)))
  ; 
  ;(use-package ivy
  ;  :ensure t
  ;  :diminish (ivy-mode)
  ;  :bind (("C-x b" . ivy-switch-buffer))
  ;  :config
  ;  (ivy-mode 1)
  ;  (setq ivy-use-virtual-buffers t)
  ;  (setq ivy-count-format "%d/%d ")
  ;  (setq ivy-display-style 'fancy))
  ; 
  ;(use-package swiper
  ;  :ensure t
  ;  :bind (("C-s" . swiper-isearch)
  ;         ("C-r" . swiper-isearch)
  ;         ("C-c C-r" . ivy-resume)
  ;         ("M-x" . counsel-M-x)
  ;         ("C-x C-f" . counsel-find-file))
  ;  :config
  ;  (progn
  ;    (ivy-mode 1)
  ;    (setq ivy-use-virtual-buffers t)
  ;    (setq ivy-display-style 'fancy)
  ;    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
  ;    ))
#+end_src

* AVY
  #+BEGIN_SRC emacs-lisp
    (use-package avy
      :ensure
      :bind ("M-s" . avy-goto-char))
  #+END_SRC

* Autocomplete
  #+BEGIN_SRC emacs-lisp
    (use-package auto-complete
      :ensure t
      :init
      (progn
        (ac-config-default)
        (global-auto-complete-mode t)
        ))
  #+END_SRC

* Company
#+begin_src emacs-lisp
  (use-package company
  :ensure t
  :config
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 3)

  (global-company-mode t)
  )


  (defun my/python-mode-hook ()
    (add-to-list 'company-backends 'company-jedi))

  (add-hook 'python-mode-hook 'my/python-mode-hook)
  (use-package company-jedi
      :ensure t
      :config
      (add-hook 'python-mode-hook 'jedi:setup)
         )

  (defun my/python-mode-hook ()
    (add-to-list 'company-backends 'company-jedi))

  (add-hook 'python-mode-hook 'my/python-mode-hook)

  ;; company box mode
  ;(use-package company-box
  ;:ensure t
  ;  :hook (company-mode . company-box-mode))
#+end_src

* Highlight symbol
  #+BEGIN_SRC emacs-lisp
    (use-package highlight-symbol
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'highlight-symbol-mode))
  #+END_SRC

* Flycheck
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :init
      (global-flycheck-mode t))

    (use-package flycheck-color-mode-line
      :ensure t)

    (require 'flycheck-color-mode-line)

    (eval-after-load "flycheck"
      '(add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode))
  #+END_SRC

* Python
#+BEGIN_SRC emacs-lisp
  (setq py-python-command "python3")
  (setq python-shell-interpreter "python3")
 

      (use-package elpy
      :ensure t
      :config 
      (elpy-enable))

  (use-package virtualenvwrapper
    :ensure t
    :config
    (venv-initialize-interactive-shells)
    (venv-initialize-eshell))
#+END_SRC

* Yasnippet
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :init
      (yas-global-mode 1))

    (define-key yas-minor-mode-map (kbd "<tab>") nil)
    (define-key yas-minor-mode-map (kbd "TAB") nil)
    (define-key yas-minor-mode-map (kbd "<C-tab>") 'yas-expand)

    (use-package yasnippet-snippets
      :ensure t)

    (setq yas-snippet-dirs
          '("~/.emacs.d/snippets"                 ;; personal snippets
            "~/.emacs.d/snippets/collection/"           ;; foo-mode and bar-mode snippet collection
            "~/.emacs.d/snippets/yasnippet/yasmate/snippets" ;; the yasmate collection
            ))
  #+END_SRC

* Undo tree
  #+BEGIN_SRC emacs-lisp
    (use-package undo-tree
      :ensure t
      :init
      (global-undo-tree-mode))
  #+END_SRC

* Misc packages
  #+BEGIN_SRC emacs-lisp
    (global-hl-line-mode t)

    (use-package beacon
      :ensure t
      :config
      (beacon-mode 1)
      ;(set beacon-color "#666600")
      )

    (use-package hungry-delete
      :ensure t
      :config
      (global-hungry-delete-mode))

    (use-package expand-region
      :ensure t
      :config
      (global-set-key (kbd "C-=") 'er/expand-region))

    (setq save-interprogram-paste-before-kill t)

    (global-auto-revert-mode 1)
    (setq auto-revert-verbose nil)
    (global-set-key (kbd "<f5>") 'revert-buffer)
   #+END_SRC

* iedit narrow/widen
  #+BEGIN_SRC emacs-lisp
    (use-package iedit
      :ensure t)

    ; if you're windened, narrow to the region, if you're narrowed, widen
    ; bound to C-x n
    (defun narrow-or-widen-dwim (p)
    "If the buffer is narrowed, it widens. Otherwise, it narrows intelligently.
    Intelligently means: region, org-src-block, org-subtree, or defun,
    whichever applies first.
    Narrowing to org-src-block actually calls `org-edit-src-code'.

    With prefix P, don't widen, just narrow even if buffer is already
    narrowed."
      (interactive "P")
      (declare (interactive-only))
      (cond ((and (buffer-narrowed-p) (not p)) (widen))
            ((region-active-p)
             (narrow-to-region (region-beginning) (region-end)))
            ((derived-mode-p 'org-mode)
             ;; `org-edit-src-code' is not a real narrowing command.
             ;; Remove this first conditional if you don't want it.
             (cond ((ignore-errors (org-edit-src-code))
                    (delete-other-windows))
                   ((org-at-block-p)
                    (org-narrow-to-block))
                   (t (org-narrow-to-subtree))))
            (t (narrow-to-defun))))

    ;; (define-key endless/toggle-map "n" #'narrow-or-widen-dwim)
    ;; This line actually replaces Emacs' entire narrowing keymap, that's
    ;; how much I like this command. Only copy it if that's what you want.
    (define-key ctl-x-map "n" #'narrow-or-widen-dwim)
  #+END_SRC

* Web mode
  #+BEGIN_SRC emacs-lisp
    (use-package web-mode
      :ensure t
      :config
      (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.vue?\\'" . web-mode))
      (setq web-mode-engines-alist
            '(("django"    . "\\.html\\'")))
      (setq web-mode-ac-sources-alist
            '(("css" . (ac-source-css-property))
              ("vue" . (ac-source-words-in-buffer ac-source-abbrev))
              ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
      (setq web-mode-enable-auto-closing t))
    (setq web-mode-enable-auto-quoting t) ; this fixes the quote problem I mentioned
  #+END_SRC

* Load other files
  #+BEGIN_SRC emacs-lisp
    (defun load-if-exists (f)
      "load the elisp file only if it exists and is readable"
      (if (file-readable-p f)
          (load-file f)))

    (load-if-exists "~/Sync/shared/mu4econfig.el")
    (load-if-exists "~/Sync/shared/not-for-github.el")
  #+END_SRC

* PDF
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t
    )

  (use-package org-pdfview
    :ensure)

  (require 'pdf-tools)
  (require 'org-pdfview)
#+END_SRC

* Reveal.js
#+BEGIN_SRC emacs-lisp
  ;(use-package ox-reveal
  ;  :ensure t
  ;  :config
  ;  (require 'ox-reveal)
  ;  (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
  ;  (setq org-reveal-mathjax t)
  ;  )
  (use-package htmlize
    :ensure t)
#+END_SRC

* Graphviz
#+BEGIN_SRC emacs-lisp
  ;(use-package graphviz-dot-mode
  ;  :ensure t)
#+END_SRC

* Screencast
#+BEGIN_SRC emacs-lisp
  ;;--------------------------------------------------------------------------
  ;; latex
  (use-package tex
    :ensure auctex)

  (defun tex-view ()
    (interactive)
    (tex-send-command "evince" (tex-append tex-print-file ".pdf")))
  ;; babel stuff

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (emacs-lisp . t)
     (shell . t)
     (C . t)
     (js . t)
     (ditaa . t)
     (dot . t)
     (org . t)
     (latex . t )
     ))
  ;; projectile
  (use-package projectile
    :ensure t
    :bind ("C-c p" . projectile-command-map)
    :config
    (projectile-global-mode)
    (setq projectile-completion-system 'ivy))

  ;; (use-package counsel-projectile
  ;;   :ensure t
  ;;   :config
  ;;   (counsel-projectile-on)q)

  ;(use-package smartparens
  ;  :hook (prog-mode . smartparens-mode)
  ;  :custom
  ;  (sp-escape-quotes-after-insert nil)
  ;  :config
  ;  (require 'smartparens-config))
  ; 
  ;(show-paren-mode t)
#+END_SRC

* Hydra
#+BEGIN_SRC emacs-lisp
    (use-package hydra 
      :ensure hydra
      :init 
      (global-set-key
      (kbd "C-x t")
        (defhydra toggle (:color blue)
          "toggle"
          ("a" abbrev-mode "abbrev")
          ("s" flyspell-mode "flyspell")
          ("d" toggle-debug-on-error "debug")
          ("c" fci-mode "fCi")
          ("f" auto-fill-mode "fill")
          ("t" toggle-truncate-lines "truncate")
          ("w" whitespace-mode "whitespace")
          ("q" nil "cancel")))
      (global-set-key
       (kbd "C-x j")
       (defhydra gotoline 
         ( :pre (linum-mode 1)
          :post (linum-mode -1))
         "goto"
         ("t" (lambda () (interactive)(move-to-window-line-top-bottom 0)) "top")
         ("b" (lambda () (interactive)(move-to-window-line-top-bottom -1)) "bottom")
         ("m" (lambda () (interactive)(move-to-window-line-top-bottom)) "middle")
         ("e" (lambda () (interactive)(end-of-buffer)) "end")
         ("c" recenter-top-bottom "recenter")
         ("n" next-line "down")
         ("p" (lambda () (interactive) (forward-line -1))  "up")
         ("g" goto-line "goto-line")
         ))
      (global-set-key
       (kbd "C-c t")
       (defhydra hydra-global-org (:color blue)
         "Org"
         ("t" org-timer-start "Start Timer")
         ("s" org-timer-stop "Stop Timer")
         ("r" org-timer-set-timer "Set Timer") ; This one requires you be in an orgmode doc, as it sets the timer for the header
         ("p" org-timer "Print Timer") ; output timer value to buffer
         ("w" (org-clock-in '(4)) "Clock-In") ; used with (org-clock-persistence-insinuate) (setq org-clock-persist t)
         ("o" org-clock-out "Clock-Out") ; you might also want (setq org-log-note-clock-out t)
         ("j" org-clock-goto "Clock Goto") ; global visit the clocked task
         ("c" org-capture "Capture") ; Don't forget to define the captures you want http://orgmode.org/manual/Capture.html
         ("l" (or )rg-capture-goto-last-stored "Last Capture"))

       ))

  (defhydra hydra-multiple-cursors (:hint nil)
    "
   Up^^             Down^^           Miscellaneous           % 2(mc/num-cursors) cursor%s(if (> (mc/num-cursors) 1) \"s\" \"\")
  ------------------------------------------------------------------
   [_p_]   Next     [_n_]   Next     [_l_] Edit lines  [_0_] Insert numbers
   [_P_]   Skip     [_N_]   Skip     [_a_] Mark all    [_A_] Insert letters
   [_M-p_] Unmark   [_M-n_] Unmark   [_s_] Search
   [Click] Cursor at point       [_q_] Quit"
    ("l" mc/edit-lines :exit t)
    ("a" mc/mark-all-like-this :exit t)
    ("n" mc/mark-next-like-this)
    ("N" mc/skip-to-next-like-this)
    ("M-n" mc/unmark-next-like-this)
    ("p" mc/mark-previous-like-this)
    ("P" mc/skip-to-previous-like-this)
    ("M-p" mc/unmark-previous-like-this)
    ("s" mc/mark-all-in-region-regexp :exit t)
    ("0" mc/insert-numbers :exit t)
    ("A" mc/insert-letters :exit t)
    ("<mouse-1>" mc/add-cursor-on-click)
    ;; Help with click recognition in this hydra
    ("<down-mouse-1>" ignore)
    ("<drag-mouse-1>" ignore)
    ("q" nil)


    ("<mouse-1>" mc/add-cursor-on-click)
    ("<down-mouse-1>" ignore)
    ("<drag-mouse-1>" ignore))
#+END_SRC
* Multi cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :config
    (global-set-key (kbd "C-C m c") 'mc/edit-lines)
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this))
#+END_SRC

* Better Shell
#+begin_src emacs-lisp
  (use-package better-shell
    :ensure t
    :bind (("C-\"" . better-shell-shell)
           ("C-:" . better-shell-remote-open)))
#+end_src

* Elfeed
#+begin_src emacs-lisp
  (setq elfeed-db-directory "~/Sync/shared/elfeeddb")

  (defun elfeed-mark-all-as-read ()
    (interactive)
    (mark-whole-buffer)
    (elfeed-search-untag-all-unread))

  ;;functions to support syncing .elfeed between machines
  ;;makes sure elfeed reads index from disk before launching
  (defun bjm/elfeed-load-db-and-open ()
    "Wrapper to load the elfeed db from disk before opening"
    (interactive)
    (elfeed-db-load)
    (elfeed)
    (elfeed-search-update--force))

  ;;write to disk when quiting
  (defun bjm/elfeed-save-db-and-bury ()
    "Wrapper to save the elfeed db to disk before burying buffer"
    (interactive)
    (elfeed-db-save)
    (quit-window))

  (use-package elfeed
    :ensure t
    :bind (:map elfeed-search-mode-map
                ("q" . bjm/elfeed-save-db-and-bury)
                ("Q" . bjm/elfeed-save-db-and-bury)
                ("m" . elfeed-toggle-star)
                ("M" . elfeed-toggle-star)
                ("j" . mz/make-and-run-elfeed-hydra)
                ("J" . mz/make-and-run-elfeed-hydra)
                )
    :config
    (defalias 'elfeed-toggle-star
      (elfeed-expose #'elfeed-search-toggle-all 'star))
    )

  (use-package elfeed-goodies
    :ensure t
    :config
    (elfeed-goodies/setup))


  (use-package elfeed-org
    :ensure t
    :config
    (elfeed-org)
    (setq rmh-elfeed-org-files (list "~/Sync/shared/elfeed.org")))

  (defun z/hasCap (s) ""
         (let ((case-fold-search nil))
           (string-match-p "[[:upper:]]" s)
           ))

  (defun z/get-hydra-option-key (s)
    "returns single upper case letter (converted to lower) or first"
    (interactive)
    (let ( (loc (z/hasCap s)))
      (if loc
          (downcase (substring s loc (+ loc 1)))
        (substring s 0 1)
        )))

  ;;  (active blogs cs eDucation emacs local misc sports star tech unread webcomics)
  (defun mz/make-elfeed-cats (tags)
    "Returns a list of lists. Each one is line for the hydra configuratio in the form
         (c function hint)"
    (interactive)
    (mapcar (lambda (tag)
              (let* (
                     (tagstring (symbol-name tag))
                     (c (z/get-hydra-option-key tagstring))
                     )
                (list c (append '(elfeed-search-set-filter) (list (format "@6-months-ago +%s" tagstring) ))tagstring  )))
            tags))

  (defmacro mz/make-elfeed-hydra ()
    `(defhydra mz/hydra-elfeed ()
       "filter"
       ,@(mz/make-elfeed-cats (elfeed-db-get-all-tags))
       ("*" (elfeed-search-set-filter "@6-months-ago +star") "Starred")
       ("M" elfeed-toggle-star "Mark")
       ("A" (elfeed-search-set-filter "@6-months-ago") "All")
       ("T" (elfeed-search-set-filter "@1-day-ago") "Today")
       ("Q" bjm/elfeed-save-db-and-bury "Quit Elfeed" :color blue)
       ("q" nil "quit" :color blue)
       ))

  (defun mz/make-and-run-elfeed-hydra ()
    ""
    (interactive)
    (mz/make-elfeed-hydra)
    (mz/hydra-elfeed/body))

#+end_src

* C++
#+begin_src emacs-lisp
  (use-package ggtags
    :ensure t
    :config 
    (add-hook 'c-mode-common-hook
              (lambda ()
                (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
                  (ggtags-mode 1))))
    )
#+end_src

* Dumb-jump
#+begin_src emacs-lisp
  (use-package dumb-jump
    :bind (("M-g o" . dumb-jump-go-other-window)
           ("M-g j" . dumb-jump-go)
           ("M-g x" . dumb-jump-go-prefer-external)
           ("M-g z" . dumb-jump-go-prefer-external-other-window))
    :config 
    ;; (setq dumb-jump-selector 'ivy) ;; (setq dumb-jump-selector 'helm)
    :init
    (dumb-jump-mode)
    :ensure
    )
#+end_src

* Origami folding
#+begin_src emacs-lisp
  (use-package origami
    :ensure t)
#+end_src

* IBUFFER
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("dired" (mode . dired-mode))
                 ("org" (name . "^.*org$"))
                 ("magit" (mode . magit-mode))
                 ("IRC" (or (mode . circe-channel-mode) (mode . circe-server-mode)))
                 ("web" (or (mode . web-mode) (mode . js2-mode)))
                 ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
                 ("mu4e" (or

                          (mode . mu4e-compose-mode)
                          (name . "\*mu4e\*")
                          ))
                 ("programming" (or
                                 (mode . clojure-mode)
                                 (mode . clojurescript-mode)
                                 (mode . python-mode)
                                 (mode . c++-mode)))
                 ("emacs" (or
                           (name . "^\\*scratch\\*$")
                           (name . "^\\*Messages\\*$")))
                 ))))
  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-auto-mode 1)
              (ibuffer-switch-to-saved-filter-groups "default")))

  ;; don't show these
  ;(add-to-list 'ibuffer-never-show-predicates "zowie")
  ;; Don't show filter groups if there are no buffers in that group
  (setq ibuffer-show-empty-filter-groups nil)

  ;; Don't ask for confirmation to delete marked buffers
  (setq ibuffer-expert t)
#+end_src

* misc
#+begin_src emacs-lisp
  ;(use-package aggressive-indent
  ;  :ensure t
  ;  :config
  ;  (global-aggressive-indent-mode 1)
  ;  ;;(add-to-list 'aggressive-indent-excluded-modes 'html-mode)
  ;  )

  (defun z/nikola-deploy () ""
         (interactive)
         (venv-with-virtualenv "blog" (shell-command "cd ~/gh/cestlaz.github.io; nikola github_deploy"))
         )

  (defun z/swap-windows ()
    ""
    (interactive)
    (ace-swap-window)
    (aw-flip-window)
    )
#+end_src

* Keymap
#+begin_src emacs-lisp
  (defun org-agenda-show-agenda-and-todo (&optional arg)
    (interactive "P")
    (org-agenda arg "c")
    (org-agenda-fortnight-view))

  (defun z/load-iorg ()
    (interactive )
    (find-file "~/Sync/orgfiles/i.org"))

  ;; set up my own map
  (define-prefix-command 'z-map)
  (global-set-key (kbd "C-z") 'z-map) ;; was C-1
  (define-key z-map (kbd "k") 'compile)
  (define-key z-map (kbd "c") 'hydra-multiple-cursors/body)
  (define-key z-map (kbd "m") 'mu4e)
  (define-key z-map (kbd "1") 'org-global-cycle)
  (define-key z-map (kbd "a") 'org-agenda-show-agenda-and-todo)
  (define-key z-map (kbd "g") 'counsel-ag)
  (define-key z-map (kbd "2") 'make-frame-command)
  (define-key z-map (kbd "0") 'delete-frame)
  (define-key z-map (kbd "o") 'ace-window)

  (define-key z-map (kbd "s") 'flyspell-correct-word-before-point)
  (define-key z-map (kbd "i") 'z/load-iorg)
  (define-key z-map (kbd "f") 'origami-toggle-node)
  (define-key z-map (kbd "w") 'z/swap-windows)
  (define-key z-map (kbd "*") 'calc)
  ;;--------------------------------------------------------------------------


  (global-set-key (kbd "\e\ei")
                  (lambda () (interactive) (find-file "~/Sync/orgfiles/i.org")))

  (global-set-key (kbd "\e\el")
                  (lambda () (interactive) (find-file "~/Sync/orgfiles/links.org")))

  (global-set-key (kbd "\e\ec")
                  (lambda () (interactive) (find-file "~/.emacs.d/myinit.org")))

  (global-set-key (kbd "<end>") 'move-end-of-line)

#+end_src

* Wgrep
#+begin_src emacs-lisp
  (use-package wgrep
    :ensure t
    )
  (use-package wgrep-ag
    :ensure t
    )
  (require 'wgrep-ag)
#+end_src

* Regex
#+begin_src emacs-lisp
  (use-package pcre2el
    :ensure t
    :config 
    (pcre-mode)
    )
#+end_src

* Eyebrowse
#+begin_src emacs-lisp
  (use-package eyebrowse
    :ensure t
    :config 
    (eyebrowse-mode)
    )
#+end_src

* Auto-yasnippet
#+begin_src emacs-lisp
  (use-package auto-yasnippet
    :ensure t)
#+end_src 

* All the icons
#+begin_src emacs-lisp
  (use-package all-the-icons 
    :ensure t)

  (use-package all-the-icons-dired
    :ensure t)

  (add-hook 'helm-find-files 'all-the-icons-for-file)
  (add-hook 'helm-mini 'all-the-icons-for-buffer)
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
#+end_src
* FZF
#+begin_src emacs-lisp
  (use-package fzf
    :ensure t)
#+end_src
